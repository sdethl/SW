A code smell is a surface indication that usually corresponds to a deeper problem in the system.

1. Long Method

2. Refuse Bequest

If a class inherits from a base class but doesn't use any of the inherited fields or methods, developers should ask themselves if inheritance really is the right model. Signs of this code smell may be that the inherited methods go unused, or are overridden with empty method bodies. For example:

class Animal {
  private int numberOfLegs;

  ...

    public getNumberOfLegs() {
      return numberOfLegs;
    }
}

class Cat extends Animal {
  public getNumberOfLegs() {
    super.getNumberOfLegs();
  }
}

class GoldFish extends Animal {

  ...

    public getNumberOfLegs() {
      throw NotImplementedException();
    }
}

Inheritance should be used when a class wants to reuse the code in its superclass. If the classes diverge and the subclass no longer needs that functionality, the hierarchy should be broken and delegation considered instead.

Alternatively, to keep some inheritance, remove the unused fields and methods from the subclass and create a new layer that the objects can inherit from. 

3. Data Clumps

Where multiple method calls take the same set of parameters, it may be a sign that those parameters are related. To keep the group of parameters together, it can be useful to combine them together in a class. This can help aid organisation of code.

For example:

connect(String host, int port, String username);

would become:

class DatabaseCredentials {
  ...
    public String getHost() {
      return host;
    }

  public int getPort() {
    return port;
  }

  public String getUsername() {
    return username;
  }
}

...

connect(DatabaseCredentials databaseCredentials);

4. Duplicate Code

It's been known for a developer to fix a bug, only for the same symptoms to then resurface in a slightly different part of the system. This can be the result of code duplication, and a bug being fixed in one occurrence of the imperfect code but not in the duplicated versions. This poses an overhead in terms of maintenance. When developers are not aware of the duplication, they only know to fix the occurrence they have come across.

Be on the lookout for repeated code blocks and extract them out into a single placeâ€”don't repeat yourself!

5. Middle Man

When a class exists just to delegate to another, a developer should ask themselves what its real purpose is. Sometimes this is the result of a refactoring task, where logic has been moved out of a class gradually, leaving an almost empty shell. For example:

class Pet {
  private Animal animal;

  public String getName() {
    return animal.getName();
  }

  public String getBreed() {
    return animal.getBreed();
  }

  public Owner getOwner() {
    return animal.getOwner();
  }
}
For every class that exists, there is an overhead of maintenance. Make sure the class justifies its existence, and if it doesn't, go ahead and remove it.

6. Primitive Obsession

Primitive types give little in terms of domain context. A String id field could ultimately contain any sort of value. Where primitives have a domain meaning, wrap them in a small class to represent the idea. Often the class is expanded to include methods to add to the class.

For example:

Rather than

String id = product.getId();
if (isValid(id)) {
  ...
}
use

ProductId id = product.getId();
if (id.isValid()) {
  ...
}

class ProductId {

  public bool isValid() {
    ...
  }
}

